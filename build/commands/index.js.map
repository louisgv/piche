{"version":3,"sources":["index.js"],"names":["useLogState","tag","defaultValue","defaultColor","log","setLogRaw","setLog","s","color","setColor","PicheStart","tmp","workingPath","os","tmpdir","homedir","publicPath","statusFilePath","localStatus","setLocalStatus","localStatusColor","setLocalStatusColor","tunnelStatus","setTunnelStatus","tunnelStatusColor","setTunnelStatusColor","tunnel","setTunnel","fs","ensureDirSync","server","http","Server","req","res","public","listen","localtunnelPort","address","port","err","close","url","outputJson","process","on","removeSync","exit","PicheClean","tmpPath","homePath","status","setStatus","statusColor","setStatusColor","cleanup","remove","Piche","start","clean","data","setData","timer","setTimeout","stdin","destroy","once","e","clearTimeout","toString","propTypes","PropTypes","bool","defaultProps","shortFlags"],"mappings":"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","file":"index.js","sourceRoot":"../../commands","sourcesContent":["import os from \"os\";\nimport http from \"http\";\nimport handler from \"serve-handler\";\nimport localtunnel from \"localtunnel\";\nimport clipboard from \"clipboardy\";\nimport fs from \"fs-extra\";\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text, Color, Box } from \"ink\";\n\nconst useLogState = (tag, defaultValue = \"hello\", defaultColor = \"white\") => {\n\tconst [log, setLogRaw] = useState(`${tag}\\t | ${defaultValue}`);\n\n\tconst setLog = s => setLogRaw(`${tag}\\t | ${s}`);\n\n\tconst [color, setColor] = useState(defaultColor);\n\n\treturn [log, setLog, color, setColor];\n};\n\nconst PicheStart = ({ tmp }) => {\n\tconst workingPath = `${tmp ? os.tmpdir() : os.homedir()}/.piche`;\n\n\tconst publicPath = `${workingPath}/public`;\n\n\tconst statusFilePath = `${workingPath}/status.json`;\n\n\tconst [\n\t\tlocalStatus,\n\t\tsetLocalStatus,\n\t\tlocalStatusColor,\n\t\tsetLocalStatusColor\n\t] = useLogState(\"piche-local\", \"setup server . . .\", \"yellow\");\n\n\tconst [\n\t\ttunnelStatus,\n\t\tsetTunnelStatus,\n\t\ttunnelStatusColor,\n\t\tsetTunnelStatusColor\n\t] = useLogState(\"piche-tunnel\", \"waiting for piche-local . . .\", \"orange\");\n\n\tconst [tunnel, setTunnel] = useState();\n\n\tuseEffect(() => {\n\t\tfs.ensureDirSync(publicPath);\n\n\t\tconst server = new http.Server((req, res) => {\n\t\t\treturn handler(req, res, {\n\t\t\t\tpublic: publicPath\n\t\t\t});\n\t\t});\n\n\t\tserver.listen(0, () => {\n\t\t\tconst localtunnelPort = server.address().port;\n\n\t\t\tsetLocalStatusColor(\"pink\");\n\t\t\tsetTunnelStatusColor(\"orange\");\n\n\t\t\tsetLocalStatus(`up and running at http://localhost:${localtunnelPort}`);\n\n\t\t\tsetTunnelStatus(`setting up tunnel to ${localtunnelPort}`);\n\n\t\t\tlocaltunnel(localtunnelPort, async (err, tunnel) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tsetTunnelStatusColor(\"red\");\n\t\t\t\t\tsetLocalStatus(err);\n\t\t\t\t\tserver.close();\n\t\t\t\t}\n\t\t\t\tsetTunnelStatusColor(\"green\");\n\t\t\t\tsetTunnelStatus(`up and running at ${tunnel.url}`);\n\n\t\t\t\tawait fs.outputJson(statusFilePath, {\n\t\t\t\t\tport: localtunnelPort,\n\t\t\t\t\turl: tunnel.url\n\t\t\t\t});\n\n\t\t\t\tsetTunnel(tunnel);\n\t\t\t});\n\t\t});\n\n\t\tprocess.on(\"SIGINT\", () => {\n\t\t\tsetLocalStatusColor(\"magenta\");\n\t\t\tsetTunnelStatusColor(\"cyan\");\n\t\t\tsetLocalStatus(\"shutdown.\");\n\t\t\tsetTunnelStatus(\"shutdown.\");\n\n\t\t\tfs.removeSync(statusFilePath);\n\n\t\t\tif (tmp) {\n\t\t\t\tfs.removeSync(workingPath);\n\t\t\t}\n\n\t\t\tif (tunnel) {\n\t\t\t\ttunnel.close();\n\t\t\t}\n\n\t\t\tprocess.exit();\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<Box flexDirection=\"column\">\n\t\t\t<Color keyword={localStatusColor}>\n\t\t\t\t<Text>{localStatus}</Text>\n\t\t\t</Color>\n\t\t\t<Color keyword={tunnelStatusColor}>\n\t\t\t\t<Text>{tunnelStatus}</Text>\n\t\t\t</Color>\n\t\t</Box>\n\t);\n};\n\nconst PicheClean = () => {\n\tconst tmpPath = `${os.tmpdir()}/.piche`;\n\tconst homePath = `${os.homedir()}/.piche`;\n\n\tconst [status, setStatus, statusColor, setStatusColor] = useLogState(\n\t\t\"piche-clean\",\n\t\t\"warming up . . .\",\n\t\t\"yellow\"\n\t);\n\tuseEffect(() => {\n\t\tconst cleanup = async () => {\n\t\t\tsetStatus(`clean up ${tmpPath} . . .`);\n\n\t\t\tawait fs.remove(tmpPath);\n\n\t\t\tsetStatusColor(\"orange\");\n\t\t\tsetStatus(`clean up ${homePath} . . .`);\n\n\t\t\tawait fs.remove(homePath);\n\n\t\t\tsetStatusColor(\"green\");\n\t\t\tsetStatus(\"done.\");\n\t\t};\n\n\t\tcleanup();\n\t}, []);\n\n\treturn (\n\t\t<Color keyword={statusColor}>\n\t\t\t<Text>{status}</Text>\n\t\t</Color>\n\t);\n};\n\n/// piche a piece of text and send it to the temp folder\nconst Piche = ({ start, tmp, clean }) => {\n\tconst [data, setData] = useState(\"loading . . .\");\n\n\tif (clean) {\n\t\treturn <PicheClean />;\n\t}\n\n\tif (start) {\n\t\treturn <PicheStart tmp={tmp} />;\n\t}\n\n\tconst workingPath = `${tmp ? os.tmpdir() : os.homedir()}/.piche`;\n\n\tconst publicPath = `${workingPath}/public`;\n\n\tconst statusFilePath = `${workingPath}/status.json`;\n\n\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tprocess.stdin.destroy();\n\t\t}, 1000);\n\n\t\tprocess.stdin.once(\"data\", e => {\n\t\t\tclearTimeout(timer);\n\n\t\t\tsetData(e.toString());\n\t\t});\n\t}, []);\n\n\treturn <Text>Here comes the data: {data}</Text>;\n};\n\nPiche.propTypes = {\n\t/// Start piche server\n\tstart: PropTypes.bool,\n\t/// Use os.tmpdir/.piche instead of os.homedir/.piche\n\ttmp: PropTypes.bool,\n\t/// Cleanup os.tmpdir/.piche and os.homedir/.piche\n\tclean: PropTypes.bool\n};\n\nPiche.defaultProps = {\n\tstart: false,\n\ttmp: false,\n\tclean: false\n};\n\nPiche.shortFlags = {\n\tstart: \"s\",\n\ttmp: \"t\",\n\tclean: \"c\"\n};\n\nexport default Piche;\n"]}